#!/bin/sh

# Exit on any failure
set -e

exit_error() {
  echo "${1}"
  exit 1
}

# Default PATH differs between shells, and is not automatically exported
# by klibc dash.  Make it consistent.
export PATH=/sbin:/usr/sbin:/bin:/usr/bin

[ -d /dev ] || mkdir -m 0755 /dev
[ -d /root ] || mkdir -m 0700 /root
[ -d /sys ] || mkdir /sys
[ -d /proc ] || mkdir /proc
[ -d /tmp ] || mkdir /tmp
mkdir -p /var/lock
mount -t sysfs -o nodev,noexec,nosuid sysfs /sys
mount -t proc -o nodev,noexec,nosuid proc /proc

# shellcheck disable=SC2013
for x in $(cat /proc/cmdline); do
	case $x in
	initramfs.clear)
		clear
		;;
	quiet)
		quiet=y
		;;
	esac
done

if [ "$quiet" != "y" ]; then
	quiet=n
	echo "Loading, please wait..."
fi
export quiet

# Note that this only becomes /dev on the real filesystem if udev's scripts
# are used; which they will be, but it's worth pointing out
mount -t devtmpfs -o nosuid,mode=0755 udev /dev

# Prepare the /dev directory
[ ! -h /dev/fd ] && ln -s /proc/self/fd /dev/fd
[ ! -h /dev/stdin ] && ln -s /proc/self/fd/0 /dev/stdin
[ ! -h /dev/stdout ] && ln -s /proc/self/fd/1 /dev/stdout
[ ! -h /dev/stderr ] && ln -s /proc/self/fd/2 /dev/stderr

mkdir /dev/pts
mount -t devpts -o noexec,nosuid,gid=5,mode=0620 devpts /dev/pts || true

# Export the dpkg architecture
export DPKG_ARCH=
. /conf/arch.conf

# Set modprobe env
export MODPROBE_OPTIONS="-qb"

# Export relevant variables
export ROOT=
export ROOTDELAY=
export ROOTFLAGS=
export ROOTFSTYPE=
export ROOT_RWDEVICE=
export ROOT_ROPATH=
export ROOT_RWPATH=
export IP=
export DEVICE=
export BOOT=
export BOOTIF=
export UBIMTD=
export KERNEL="kernel8.img"
export break=
export init=/sbin/init
export readonly=y
export rootmnt=/root
export debug=
export panic=
export blacklist=
export resume=
export resume_offset=
export noresume=
export drop_caps=
export fastboot=n
export forcefsck=n
export fsckfix=


# Bring in the main config
. /conf/initramfs.conf
for conf in conf/conf.d/*; do
	# shellcheck disable=SC1090
	[ -f "${conf}" ] && . "${conf}"
done
. /scripts/functions

# Parse command line options
# shellcheck disable=SC2013
for x in $(cat /proc/cmdline); do
	case $x in
	init=*)
		init=${x#init=}
		;;
	root=*)
		ROOT=${x#root=}
		if [ -z "${BOOT}" ] && [ "$ROOT" = "/dev/nfs" ]; then
			BOOT=nfs
		fi
		;;
	rootflags=*)
		ROOTFLAGS="-o ${x#rootflags=}"
		;;
  writable=*)
    ROOT_RWDEVICE="${x#writable=}"
    ;;
  root_readonly=*)
    ROOT_ROPATH="${x#root_readonly=}"
    ;;
  root_writable=*)
    ROOT_RWPATH="${x#root_writable=}"
    ;;
  root_backup=*)
    ROOT_BUPATH="${x#root_backup=}"
    ;;
  kernel=*)
    KERNEL="${x#kernel=}"
    ;;
	rootfstype=*)
		ROOTFSTYPE="${x#rootfstype=}"
		;;
	rootdelay=*)
		ROOTDELAY="${x#rootdelay=}"
		case ${ROOTDELAY} in
		*[![:digit:].]*)
			ROOTDELAY=
			;;
		esac
		;;
	nfsroot=*)
		# shellcheck disable=SC2034
		NFSROOT="${x#nfsroot=}"
		;;
	initramfs.runsize=*)
		RUNSIZE="${x#initramfs.runsize=}"
		;;
	ip=*)
		IP="${x#ip=}"
		;;
	boot=*)
		BOOT=${x#boot=}
		;;
	ubi.mtd=*)
		UBIMTD=${x#ubi.mtd=}
		;;
	resume=*)
		RESUME="${x#resume=}"
		;;
	resume_offset=*)
		resume_offset="${x#resume_offset=}"
		;;
	noresume)
		noresume=y
		;;
	drop_capabilities=*)
		drop_caps="-d ${x#drop_capabilities=}"
		;;
	panic=*)
		panic="${x#panic=}"
		;;
	ro)
		readonly=y
		;;
	rw)
		readonly=n
		;;
	debug)
		debug=y
		quiet=n
		if [ -n "${netconsole}" ]; then
			log_output=/dev/kmsg
		else
			log_output=/run/initramfs/initramfs.debug
		fi
		set -x
		;;
	debug=*)
		debug=y
		quiet=n
		set -x
		;;
	break=*)
		break=${x#break=}
		;;
	break)
		break=premount
		;;
	blacklist=*)
		blacklist=${x#blacklist=}
		;;
	netconsole=*)
		netconsole=${x#netconsole=}
		[ "$debug" = "y" ] && log_output=/dev/kmsg
		;;
	BOOTIF=*)
		BOOTIF=${x#BOOTIF=}
		;;
	fastboot|fsck.mode=skip)
		fastboot=y
		;;
	forcefsck|fsck.mode=force)
		forcefsck=y
		;;
	fsckfix|fsck.repair=yes)
		fsckfix=y
		;;
	fsck.repair=no)
		fsckfix=n
		;;
	esac
done

# Default to BOOT=local if no boot script defined.
if [ -z "${BOOT}" ]; then
	BOOT=local
fi

if [ -n "${noresume}" ] || [ "$RESUME" = none ]; then
	noresume=y
else
	resume=${RESUME:-}
fi

mount -t tmpfs -o "nodev,noexec,nosuid,size=${RUNSIZE:-10%},mode=0755" tmpfs /run
mkdir -m 0700 /run/initramfs

if [ -n "$log_output" ]; then
  [ -f "${log_output}" ] || touch "${log_output}"
  echo "redirecting output to ${log_output}"
	exec >$log_output 2>&1
	unset log_output
fi

maybe_break top

# Don't do log messages here to avoid confusing graphical boots
run_scripts /scripts/init-top || exit_error "init-top"
maybe_break modules
[ "$quiet" != "y" ] && log_begin_msg "Loading essential drivers"
[ -n "${netconsole}" ] && /sbin/modprobe netconsole netconsole="${netconsole}"
load_modules || exit_error "load_modules"
[ "$quiet" != "y" ] && log_end_msg

starttime="$(_uptime)"
starttime=$((starttime + 1)) # round up
export starttime

if [ "$ROOTDELAY" ]; then
	sleep "$ROOTDELAY"
fi

maybe_break premount || exit_error "premount"
[ "$quiet" != "y" ] && log_begin_msg "Running /scripts/init-premount"
run_scripts /scripts/init-premount || exit_error "init-premount"
[ "$quiet" != "y" ] && log_end_msg

maybe_break mount
log "Mounting root file system"
# Always load local and nfs (since these might be needed for /etc or
# /usr, irrespective of the boot script used to mount the rootfs).
. /scripts/local
. /scripts/nfs
# shellcheck disable=SC1090
. /scripts/${BOOT}
parse_numeric "${ROOT}"
maybe_break mountroot
mount_top || exit_error "mount_top"
mount_premount || exit_error "mount_premount"
mountroot || exit_error "mountroot"
#log_end_msg

if read_fstab_entry /usr; then
	log_begin_msg "Mounting /usr file system"
	mountfs /usr || exit_error "mountfs"
	log_end_msg
fi

# Check for instance installed to other media
scripts/check_install.sh && log "Not installing to internal storage"
# If this does install, then boot will fail and reboot to next boot device (internal emmc for OPi)

# Mount cleanup
mount_bottom || exit_error "mount_bottom"
nfs_bottom || exit_error "nfs_bottom"
local_bottom || exit_error "local_bottom"

maybe_break bottom

validate_init() {
	run-init -n "${rootmnt}" "${1}"
}

# Custom SquashFS Handling
if [ -n "${ROOT_ROPATH}" ]; then
  log "configuring squashFS file: ${ROOT_ROPATH}"

  # Mount "real" root as RW
  mount -o remount,rw ${rootmnt}

  # Mount read-write FS
  mkdir -p /media/rw
  if [ -n "${ROOT_RWPATH}" ]; then
    log "configuring RW path: ${ROOT_RWPATH}"
    [ -d "${rootmnt}/${ROOT_RWPATH}" ] || mkdir -p "${rootmnt}/${ROOT_RWPATH}"
    mount --bind "${rootmnt}/${ROOT_RWPATH}" /media/rw -o relatime,nosuid,nodev
  elif [ -n "${ROOT_RWDEVICE}" ]; then
    mount "${ROOT_RWDEVICE}" /media/rw -t auto -o relatime,nosuid,nodev
  else
    log "No RW Device configured!"
    exit 10
  fi

  # Define a path to temporarily cache user data during updates
  user_backup_path="/media/rw/user_backup"

  if [ -d "${user_backup_path}" ]; then
    log "WARN: backup path present; an update did not complete as expected"
    # TODO: How to recover here?
  fi

  if [ -n "${ROOT_BUPATH}" ]; then
    scripts/check_update.sh "/media/rw/upperdir/" "/media/rw/upperdir/opt/neon/update.squashfs" "${rootmnt}/${ROOT_ROPATH}" "${user_backup_path}" "${rootmnt}/${ROOT_BUPATH}"
  else
    scripts/check_update.sh "/media/rw/upperdir/" "/media/rw/upperdir/opt/neon/update.squashfs" "${rootmnt}/${ROOT_ROPATH}" "${user_backup_path}"
  fi

  scripts/check_reset.sh "/media/rw"
  # Mount read-only FS
  log_begin_msg "Mounting squashfs root"
  mkdir -p /media/ro
  mount -t "squashfs" -o noatime,nodiratime "${rootmnt}/${ROOT_ROPATH}" /media/ro
  mount -o remount,ro /media/ro
  # TODO: Recover here by restoring a backup squashfs
  log_end_msg

  if [ -f /media/rw/upperdir/opt/neon/squashfs_updated ]; then
    fw_backup_path="/media/rw/firmware_backup"
    log "Checking for updated kernel/firmware"
    scripts/check_firmware_update.sh "${fw_backup_path}"
    log "No firmware update to apply"
  fi

  # Optionally Create and mount swapfile
  scripts/check_swapfile.sh "${rootmnt}/swapfile"
  if [ -f "${rootmnt}/swapfile" ]; then
    [ "$quiet" != "y" ] && log_begin_msg "mounting swapfile"
    touch /swapfile
    mount --bind ${rootmnt}/swapfile /swapfile
    [ "$quiet" != "y" ] && log_end_msg
  fi
  [ "$quiet" != "y" ] && log "swapfile handled"

  # Define remaining paths and build overlayFS
  [ -d /media/rw/work ] || mkdir -p /media/rw/work
  [ -d /media/rw/upperdir ] || mkdir -p /media/rw/upperdir

  [ "$quiet" != "y" ] && log_begin_msg "Mounting overlayFS"
  mount -t overlay overlay -o lowerdir=/media/ro,upperdir=/media/rw/upperdir,workdir=/media/rw/work ${rootmnt}
  [ "$quiet" != "y" ] && log_end_msg

  [ "$quiet" != "y" ] && log_begin_msg "Running /scripts/init-bottom"
  # We expect udev's init-bottom script to move /dev to ${rootmnt}/dev
  if [ ! -d "${rootmnt}/dev" ]; then
    log_warning_msg "/dev not initialized"
    # Ensure /dev directory exists
    mkdir "${rootmnt}/dev"
  fi
  run_scripts /scripts/init-bottom
  [ "$quiet" != "y" ] && log_end_msg
  # Move /run to the root
  mount -n -o move /run ${rootmnt}/run

  # Remount partitions in overlayfs
  mkdir -p ${rootmnt}/media/ro ${rootmnt}/media/rw
  mount -n --move /media/ro ${rootmnt}/media/ro
  mount -n --move /media/rw ${rootmnt}/media/rw

  init="/sbin/init"
else
  [ "$quiet" != "y" ] && log_begin_msg "Running /scripts/init-bottom"
  # We expect udev's init-bottom script to move /dev to ${rootmnt}/dev
  [ -d "${rootmnt}/dev" ] || mkdir "${rootmnt}/dev"  # Ensure new directory exists
  run_scripts /scripts/init-bottom
  [ "$quiet" != "y" ] && log_end_msg
  # Move /run to the root
  mount -n -o move /run ${rootmnt}/run

  # Check init is really there
  if ! validate_init "$init"; then
    log "Target filesystem doesn't have requested ${init}."
    init=
    for inittest in /sbin/init /etc/init /bin/init /bin/sh; do
      if validate_init "${inittest}"; then
        init="$inittest"
        break
      fi
    done
  fi
fi

# No init on rootmount
if [ -z "${init}" ] ; then
	panic "No init found. Try passing init= bootarg."
fi

maybe_break init

# don't leak too much of env - some init(8) don't clear it
# (keep init, rootmnt, drop_caps)
unset debug
unset MODPROBE_OPTIONS
unset DPKG_ARCH
unset ROOTFLAGS
unset ROOTFSTYPE
unset ROOTDELAY
unset ROOT
unset ROOT_ROPATH
unset ROOT_RWPATH
unset IP
unset BOOT
unset BOOTIF
unset DEVICE
unset UBIMTD
unset blacklist
unset break
unset noresume
unset panic
unset quiet
unset readonly
unset resume
unset resume_offset
unset noresume
unset fastboot
unset forcefsck
unset fsckfix
unset starttime

# Move virtual filesystems over to the real filesystem
[ -d "${rootmnt}/sys" ] || mkdir "${rootmnt}/sys"
[ -d "${rootmnt}/proc" ] || mkdir "${rootmnt}/proc"
mount -n -o move /sys ${rootmnt}/sys
mount -n -o move /proc ${rootmnt}/proc
log "Mounted /sys and /proc"
# If a swapfile exists, remount it in the new root
if [ -f /swapfile ]; then
  [ -f "${rootmnt}/swapfile" ] || touch "${rootmnt}/swapfile"
  mount -n -o move /swapfile ${rootmnt}/swapfile
  log "Mounted /swapfile"
fi

# Flush dmesg logs to disk
dmesg > "${rootmnt}/var/log/initramfs.log"

# Chain to real filesystem
# shellcheck disable=SC2086,SC2094
exec run-init ${drop_caps} "${rootmnt}" "${init}" "$@" <"${rootmnt}/dev/console" >"${rootmnt}/dev/console" 2>&1
echo "Something went badly wrong in the initramfs."
panic "Please file a bug on initramfs-tools."
